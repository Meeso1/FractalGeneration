import numpy as np


def generate_dragon_sequence(iterations: int) -> str:
    """
    Generate the L-system string for a dragon curve.
    
    The dragon curve is generated by iteratively applying rules:
    - F -> F+G
    - G -> F-G
    
    Args:
        iterations: Number of iterations to apply the L-system rules
    
    Returns:
        The generated L-system string
    """
    sequence = "F"
    for _ in range(iterations):
        next_sequence = ""
        for char in sequence:
            if char == "F":
                next_sequence += "F+G"
            elif char == "G":
                next_sequence += "F-G"
            else:
                next_sequence += char
        sequence = next_sequence
    
    return sequence


def sequence_to_points(sequence: str) -> np.ndarray:
    """
    Convert an L-system sequence to coordinate points using turtle graphics.
    
    Interprets the string as turtle graphics commands:
    - F, G: move forward
    - +: turn left 90 degrees
    - -: turn right 90 degrees
    
    Args:
        sequence: The L-system string to interpret
    
    Returns:
        A 2xn array defining points of the curve (x, y).
    """
    # Direction vectors: 0=right, 1=up, 2=left, 3=down
    directions = np.array([
        [1, 0],   # right
        [0, 1],   # up
        [-1, 0],  # left
        [0, -1]   # down
    ])
    
    # Start at origin, facing right
    position = np.array([0.0, 0.0])
    direction = 0
    
    # Store all points
    points = [position.copy()]
    
    for char in sequence:
        if char == "F" or char == "G":
            # Move forward
            position = position + directions[direction]
            points.append(position.copy())
        elif char == "+":
            # Turn left (counterclockwise)
            direction = (direction + 1) % 4
        elif char == "-":
            # Turn right (clockwise)
            direction = (direction - 1) % 4
    
    # Convert to 2xn array
    points_array = np.array(points).T
    return points_array


def dragon_curve(iterations: int) -> np.ndarray:
    """
    Generate a dragon curve fractal using L-system.
    
    Args:
        iterations: Number of iterations to apply the L-system rules
    
    Returns:
        A 2xn array defining points of the curve (x, y).
    """
    sequence = generate_dragon_sequence(iterations)
    return sequence_to_points(sequence)
